# Existing Recipe types, queries, and mutations
type Recipe {
  id: ID!
  name: String!
  ingredients: [String!]!
  steps: [String!]!
  prepTime: Int!
  cookTime: Int!
  cuisineType: String!
  calories: Int!
  imageUrl: String
}

type Query {
  recipes: [Recipe!]!
  recipe(id: ID!): Recipe!
  users: [User!]!         # Query to get all users
  user(id: ID!): User!    # Query to get a specific user by ID
}

input RecipeInput {
  name: String
  ingredients: [String]
  steps: [String]
  prepTime: Int
  cookTime: Int
  cuisineType: String
  calories: Int
  imageUrl: String
}

# New User types and inputs
enum UserRole {
  ADMIN
  USER
}

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  role: UserRole!
}

input UserInput {
  username: String!
  email: String!
  password: String!
  role: UserRole!
}

type Mutation {
  # Existing Recipe mutations
  addRecipe(
    name: String!
    ingredients: [String!]!
    steps: [String!]!
    prepTime: Int!
    cookTime: Int!
    cuisineType: String!
    calories: Int!
    imageUrl: String
  ): Recipe!

  updateRecipe(
    id: ID!
    input: RecipeInput!
  ): Recipe!

  deleteRecipe(id: ID!): Recipe!

  # New User mutations
  addUser(
    input: UserInput!
  ): User!                # Mutation to add a new user
  
  updateUser(
    id: ID!
    input: UserInput!
  ): User!                # Mutation to update an existing user
  
  deleteUser(id: ID!): User!  # Mutation to delete a user
}